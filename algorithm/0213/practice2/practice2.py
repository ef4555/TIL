'''
문자열에 있는 괄호를 차례대로 조사하면서, 왼쪽 괄호를 만나면 스택에 삽입하고
오른쪽 괄호를 만나면 스택에서 top 괄호를 삭제한 후 오른쪽 괄호와 짝이 맞는지를 검사한다

1. 왼쪽 괄호의 개수와 오른쪽 괄호의 개수가 같아야 한다
2. 같은 괄호에서 왼쪽 괄호는 오른쪽 괄호보다 먼저 나와야 한다
3. 괄호 사이에는 포함관계만 존재한다.

이 때 스택이 비어있으면 조건1 또는 조건 2에 위배되고
괄호의 짝이 맞지 않으면 조건 3에 위배된다.
'''



a = '()()((()))'
b = '((()((((()()((()())((())))))'
c = '( )( )((( )))'
d = '((( )((((( )( )((( )( ))((( ))))))'
e = '())'
f = '(()'
def gh_test(lst):
    N = len(lst)
    stack = [0 for _ in range(N)]
    top = -1
    c = True
    for i in lst:
        if i == '(':
            top += 1
            stack[top] = i
        elif i == ')':
            stack[top] = 0
            top -= 1
            if top < -1: # 만약 스택이 비어있어서 언더플로우가 된 상황 이면
                c = False
    for j in stack:
        if j != 0:
            c = False
    return c, stack
print(gh_test(f))