'''
강변에 빌딩들이 옆으로 빽빽하게 밀집한 지역이 있다.

이곳에서는 빌딩들이 너무 좌우로 밀집하여, 강에 대한 조망은 모든 세대에서 좋지만 왼쪽 또는 오른쪽 창문을 열었을 때 바로 앞에 옆 건물이 보이는 경우가 허다하였다.

그래서 이 지역에서는 왼쪽과 오른쪽으로 창문을 열었을 때, 양쪽 모두 거리 2 이상의 공간이 확보될 때 조망권이 확보된다고 말한다.

빌딩들에 대한 정보가 주어질 때, 조망권이 확보된 세대의 수를 반환하는 프로그램을 작성하시오.
 
아래와 같이 강변에 8채의 빌딩이 있을 때, 연두색으로 색칠된 여섯 세대에서는 좌우로 2칸 이상의 공백이 존재하므로 조망권이 확보된다. 따라서 답은 6이 된다.



A와 B로 표시된 세대의 경우는 왼쪽 조망은 2칸 이상 확보가 되었지만 오른쪽 조망은 한 칸 밖에 확보가 되지 않으므로 조망권을 확보하지 못하였다.

C의 경우는 반대로 오른쪽 조망은 2칸이 확보가 되었지만 왼쪽 조망이 한 칸 밖에 확보되지 않았다.
 
[제약 사항]

가로 길이는 항상 1000이하로 주어진다.

맨 왼쪽 두 칸과 맨 오른쪽 두 칸에는 건물이 지어지지 않는다. (예시에서 빨간색 땅 부분)

각 빌딩의 높이는 최대 255이다.
 
[입력]

총 10개의 테스트케이스가 주어진다.

각 테스트케이스의 첫 번째 줄에는 건물의 개수 N이 주어진다. (4 ≤ N ≤ 1000)

그 다음 줄에는 N개의 건물의 높이가 주어진다. (0 ≤ 각 건물의 높이 ≤ 255)

맨 왼쪽 두 칸과 맨 오른쪽 두 칸에 있는 건물은 항상 높이가 0이다. (예시에서 빨간색 땅 부분)
 
[출력]

#부호와 함께 테스트케이스의 번호를 출력하고, 공백 문자 후 조망권이 확보된 세대의 수를 출력한다.
# '''

import sys
sys.stdin = open('jomang.txt')
T = 10 # 테스트 케이스 10개
count = 0 # 테스트 케이스 순번 저장할 변수
for i in range(1,T+1): # 테스트 케이스만큼 순회하면서
    gun_num = int(input()) # 건물의 갯수 저장
    gun_mool = list(map(int, input().split())) # 건물의 높이들 리스트에 원소로 저장
    jomang_num = 0 # 조망권이 확보된 세대를 저장
    for idx in range(2,gun_num-2): # 왼쪽 건물 2개 맨오른쪽 건물2개는 0이므로 인덱스 2부터 마지막보다 2적은 인덱스까지 순회하면서
        side = [gun_mool[idx-2], gun_mool[idx-1], gun_mool[idx+1],gun_mool[idx+2]] # 해당 건물 양쪽 두개 씩 건물의 높이 리스트에 저장
        max1 = side[0] # 4개의 건물 중 제일 높은 건물의 층수를 저장할 변수
        for num1 in side: # 해당 건물 양쪽 두개 씩 건물들 높이 저장한 리스트를 순회하면서
            if max1 < num1: # 4개 건물 중 최대 높이 건물 층수 저장
                max1 = num1
        if max1 < gun_mool[idx]: # 해당 건물이 양 옆 두개 건물 중 최대 높이 건물보다 크면
            jomang_num += gun_mool[idx]-max1 # 해당 건물 높이에서 양 옆 두개 건물 중 최대 높이 빼주면 조망권 확보된 세대수가 나오고 이를 조망권 확보된 세대수를 저장하는 jomang_num에 더해준다.
    count += 1 # 테스트 케이스 순번 갱신
    print(f'#{count} {jomang_num}')


'''
for t in range(1, 11): # test case 10개
    buildings_num = int(input())
    buildings = list(map(int, input().split()))
    result = 0
 
    i = 2
    while i < buildings_num-2:
        if max(buildings[i-2:i+3]) == buildings[i]:
            # 좌2우2 중 최대 높이이면
            second_high = max(buildings[i-2:i] + buildings[i+1:i+3])
            # 조망권 확보 세대는 2번째 높은 층 위 세대들
            result += buildings[i] - second_high
            i += 3
        else:
            i += 1
 
    print(f'#{t} {result}')
'''
