'''
7 8 
1 2 1 3 2 4 2 5 4 6 5 6 6 7 3 7
'''

def dfs1(v, k): # 중복 없이 빠짐 없이
    visited[v] = 1
    print(v)
    for w in adjl[v]: # v와 인접하고
        if visited[w] == 0: # 방문한 적이 없는 w가 있으면
            dfs1(w, k)
    # for w in range(1, k+1):
    #     if adjm[v][w] == 1 and visited[w] == 0:
    #         dfs1(w, k)


def dfs2(s, k):
    stack = []
    visited = [0] * (k+1)
    v = s
    while True:
        if visited[v] == 0:
            print(v)
            visited[v] = 1
        for w in range(1, k+1):
            if adjm[v][w] and visited[w] == 0:
                stack.append(v)
                v = w
                break
        else:  # 더이상 인접한 정점이 없으면
            if stack: # 스택이 비어있지 않으면
                v = stack.pop()
            else:
                break
                    

def dfs3(v, k, g):
    global cnt
    if v == g:
        print('카운트 증가')
        cnt += 1 # 목적지 도착 횟수
    else:       
        visited[v] = 1 # 중복 방지용
        print(v)
        for w in range(1, k+1):
            if adjm[v][w] == 1 and visited[w] == 0:
                dfs3(w, k, g)
        visited[v] = 0
    # for w in range(1, k+1):
    #     if adjm[v][w] == 1 and visited[w] == 0:
    #         dfs1(w, k)    
    
V, E = map(int, input().split())
arr = list(map(int,input().split()))
adjm = [[0]*(V+1) for _ in range(V+1)]
# [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 0, 1, 1, 0, 0], [0, 1, 0, 0, 0, 0, 0, 1], [0, 0, 1, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 0, 1, 0], [0, 0, 0, 0, 1, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0]]
adjl = [[] for _ in range(V+1)] 
# [[], [2, 3], [1, 4, 5], [1, 7], [2, 6], [2, 6], [4, 5, 7], [6, 3]]
visited = [0]*(V+1)
visited[0] = 1
for i in range(E): # E개의 간선 순회하면서
    n1, n2 = arr[i*2], arr[i*2 + 1]
    adjm[n1][n2] = 1
    adjm[n2][n1] = 1
    adjl[n1].append(n2)
    adjl[n2].append(n1)
cnt = 0
print(adjm)
print(adjl)
dfs3(1, V, 7)
print(cnt)
print(visited)